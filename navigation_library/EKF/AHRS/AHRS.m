function [Cbn, P, bw] = AHRS(Cbn, P, bw, dwb, fb, mb, fn, mn, dt)
% [Cbn, P, bw] = ahrs_dcm(Cbn, P, bw, dwb, fb, mb, fn, mn, dt)
% Реализует алгоритм курсовертикали на базе использования измерений от
% датчиков угловой скорости, ускорения и магнитного поля
%
%   Входные аргументы:
%   Cbn - Матрица направляющих косинусов
%   P   - Матрица ковариации фильтра Калмана
%   bw  - Вектор оценок сдвигов нулей ДУС
%   dwb - Вектор измерений ДУС
%   fb  - Вектор измерений акселерометра
%   mb  - Вектор измерений магнитного поля
%   fn  - Вектор ускорения свободного падения в навигационной СК 
%   mn  - Вектор магнитного поля в навигационной СК
%   dt  - Шаг интегрирования
%
%   Выходные аргументы:
%   Cbn  - Матрица направляющих косинусов 
%   P    - Матрица ковариации фильтра Калмана
%   bw   - Вектор оценок сдвигов нулей ДУС


%% Коррекция показаний ДУС
dwb = dwb - bw * dt;

%% Обновление матрицы направляющих косинусов (интегрирование ориентации)
rot_norm = norm(dwb);
sr_a = 1 - (rot_norm ^ 2 / 6) + (rot_norm ^ 4 / 120);
sr_b = (1 / 2) - (rot_norm ^ 2 / 24) + (rot_norm ^ 4 / 720);
Cbb = eye(3) + sr_a * skew(dwb) + sr_b * skew(dwb) * skew(dwb);
Cbn = Cbn * Cbb;

%% Фильтр Калмана - предсказание 
% Матрица F динамики системы и матрица Q ковариации шумов измерений

% Матрица динамики системы в непрерывном времени
A = zeros(6, 6);
A(1:3, 4:6) = -Cbn;

% Матрица динамики системы в дискретном времени
F = eye(6) + A * dt + A * A * dt * dt / 2;

% Матрица влияния шумов системы 
G = zeros(6, 6);
G(1:3, 1:3) = eye(3);
G(4:6, 4:6) = eye(3);

% Шумы ошибок ДУС
ng = 1e-4;

% Шумы сдвигов нолей ДУС
ngb = 1e-6;

% Матрица ковариации шумов системы
Qn = diag([ng, ng, ng, ngb, ngb, ngb]);

% Дискретизация с интегрированием методом трапеций
Q = 1 / 2 * (F * G * Qn * G' + G * Qn * G' * F') * dt;

% Обновленное значение марицы ковариации фильтра Калмана
P = F * P * F' + Q;

%% Измерения
% Оценка вектора ускорения свободного падения в навигационной СК
fn_hat = Cbn * fb;

% Оценка вектора магнитного поля в навигационной СК
mn_hat = Cbn * mb;

% Вектор измерений
v = zeros(6, 1);
v(1:3, 1) = fn_hat - fn;
v(4:6, 1) = mn_hat - mn;

% Матрица измерений
H = zeros(6, 6);
H(1:3, 1:3) = skew(fn_hat);
H(4:6, 1:3) = skew(mn_hat);

% Матрица ковариации шумов измерений
R = diag([1e-1, 1e-1, 1e-1, 1e-1, 1e-1, 1e-1]);

%% Фильтр Калмана - коррекция
I = eye(6);
S = H * P * H' + R;
K = (P * H') / S;
P = (I - K * H) * P * (I - K * H)' + K * R * K';
x = K * v;

%% Коррекция матрицы направляющих косинусов
E = eye(3) + skew(x(1:3, 1));
Cbn = E * Cbn;

% Нормализация матрицы направляющих косинусов
Cbn = dcmnormalize(Cbn);

%% Обновление оценки сдвига нулей ДУС
bw = bw + x(4:6, 1);

end
